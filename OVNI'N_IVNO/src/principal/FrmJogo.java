/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package principal;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Random;

/**
 *
 * @author Gustavo
 */
public class FrmJogo extends javax.swing.JFrame implements Runnable {

    Graphics g;
    Jogador j = new Jogador("img/spaceship.gif");
    Imagem b = new Imagem("img/background.jpg");
    Imagem e = new Imagem("img/explosao.gif");
    Imagem a = new Imagem("img/alien.gif");
    Imagem o = new Imagem("img/game-over.png");

    ArrayList<Meteoro> meteoros = new ArrayList();
    ArrayList<Meteoro> lixos = new ArrayList();

    int proporcao;
    long pontuacao;
    long tempo;
    long melhorPontuacao;
    Random r = new Random();

    private boolean iniciarJogo;
    private boolean fimJogo;

    /**
     * Creates new form FrmJogo
     */
    public FrmJogo() {
        setTitle("OVNI'N IVNO ðŸ‘½");
        initComponents();
        editarJanela();
        createBufferStrategy(2);
        Thread t = new Thread(this);
        t.start();
    }

    public void editarJanela() {
        setSize(1000, 700);
        setLocationRelativeTo(null);
        setVisible(true);
        setLayout(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_UP:
                j.cima = true;
                break;
            case KeyEvent.VK_DOWN:
                j.baixo = true;
                break;
            case KeyEvent.VK_LEFT:
                j.esquerda = true;
                break;
            case KeyEvent.VK_RIGHT:
                j.direita = true;
                break;
            case KeyEvent.VK_SPACE:
                iniciarJogo = true;
                break;
            default:
                break;
        }
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_UP:
                j.cima = false;
                break;
            case KeyEvent.VK_DOWN:
                j.baixo = false;
                break;
            case KeyEvent.VK_LEFT:
                j.esquerda = false;
                break;
            case KeyEvent.VK_RIGHT:
                j.direita = false;
                break;
            default:
                break;
        }
    }//GEN-LAST:event_formKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmJogo().setVisible(true);
            }
        });
    }

    @Override
    public void run() {

        //Posicionar elementos
        j.setX(450);
        j.setY(350);
        e.setY(700);
        a.setX(220);
        a.setY(250);
        o.setX(375);
        o.setY(230);

        //Inicializar controles
        proporcao = 300;
        pontuacao = 0;
        tempo = 0;
        melhorPontuacao = 0;

        while (true) {
            g = getBufferStrategy().getDrawGraphics();
            g.setColor(Color.WHITE);

            if (!fimJogo) {
                b.desenhar(g);
                a.desenhar(g);
                g.setFont(new Font("Arial", 0, 19));
                g.drawString("Seja bem-vindo ao jogo...", 370, 180);
                g.drawString("Pressione ESPAÃ‡O para iniciar", 340, 570);
                g.drawString("Desenvolvido por: Gustavo LuÃ­s A. Ferreira RA: 160037", 480, 680);
                g.setFont(new Font("Arial", 3, 22));
                g.drawString("OVNI'N IVNO", 405, 220);
            }

            if (iniciarJogo) {
                //Desenha background
                b.desenhar(g);
                //Desenha jogador
                j.desenhar(g);

                //Move jogador
                j.voar();

                //Gera valor randomico
                r = new Random();

                //Recebe valor randomico que pertenÃ§a ao valor de proporÃ§Ã£o
                int q = (int) r.nextInt(proporcao);
                if (q >= 0 && q <= 4) {
                    //Cria meteoro
                    Meteoro m = new Meteoro();

                    //Gera meteoro em determinada coordenada de acordo com o valor randomico
                    switch (q) {
                        case 0:
                            m.setIncX(-2);
                            m.setIncY(2);
                            m.setImagem("img/meteoro-descendo-esquerda.gif");
                            m.setY(30);
                            break;
                        case 1:
                            m.setIncY(2);
                            m.setIncX(2);
                            m.setImagem("img/meteoro-descendo-direita.gif");
                            m.setY(30);
                            break;
                        case 2:
                            m.setIncY(-2);
                            m.setIncX(2);
                            m.setImagem("img/meteoro-subindo-esquerda.gif");
                            m.setY(600);
                            break;
                        case 3:
                            m.setIncY(-2);
                            m.setIncX(-2);
                            m.setImagem("img/meteoro-subindo-direita.gif");
                            m.setY(600);
                            break;
                        default:
                            break;
                    }

                    m.setX(r.nextInt(getWidth()));

                    //Adiciona Ã  lista de meteoros
                    meteoros.add(m);
                }

                //Desenha meteoros
                for (Meteoro m : meteoros) {
                    m.desenhar(g);
                }

                //Move meteoros
                for (Meteoro m : meteoros) {
                    m.mover();
                }

                //ColisÃ£o jogador - meteoro
                for (Meteoro m : meteoros) {
                    if (j.colisao(m)) {
                        j.vida--;
                        j.morto++;
                        m.setY(-1);
                        e.setX(j.getX());
                        e.setY(j.getY());
                        lixos.add(m);
                    }
                }

                g.setColor(Color.WHITE);
                g.setFont(new Font("Arial", 0, 19));
                g.drawString("PONTUAÃ‡ÃƒO: " + pontuacao, 20, 60);

                for (int x = 1; x <= j.vida; x++) {
                    Imagem vida = new Imagem("img/vida.png");
                    vida.setX(-20 + (x * 43));
                    vida.setY(640);
                    vida.desenhar(g);
                }

                for (int k = j.morto; k > 0; k--) {
                    Imagem morto = new Imagem("img/morto.png");
                    morto.setX(-20 + ((k + j.vida) * 43));
                    morto.setY(640);
                    morto.desenhar(g);
                }
                
                //ColisÃ£o jogador com lateral
                j.trataColisao(getWidth(), getHeight());
                
                //ColisÃ£o meteoro - meteoro
                for (int m = 0; m < meteoros.size(); m++) {
                    for (int m2 = meteoros.size() - 1; m2 > 0; m2--) {

                        Meteoro met1 = meteoros.get(m);
                        Meteoro met2 = meteoros.get(m2);

                        if (met1.colisao(met2)) {
                            e.setX(met1.x);
                            e.setY(met2.y);
                            lixos.add(met1);
                            lixos.add(met2);
                        }
                    }
                }

                //Desenha animaÃ§Ã£o de explosÃ£o
                e.desenhar(g);
                tempo++;

                if (tempo == 110) {
                    e.setY(-400);
                    tempo = 0;
                }

                //Trata colisÃ£o de meteoros no cenÃ¡rio
                for (Meteoro m : meteoros) {
                    Colisao aux = m.trataColisao(getWidth(), getHeight());
                    if (aux == Colisao.DOWN || aux == Colisao.RIGHT || aux == Colisao.UP || aux == Colisao.LEFT) {
                        lixos.add(m);
                    }
                }

                //Trata meteoros colididos com o cenÃ¡rio
                meteoros.removeAll(lixos);
                lixos.clear();

                //Contador de pontuaÃ§Ã£o
                pontuacao++;

                //Gera valor de proporÃ§Ã£o em pontuaÃ§Ã£o
                if (pontuacao == 5000) {
                    proporcao = 280;
                } else if (pontuacao == 7500) {
                    proporcao = 250;
                } else if (pontuacao == 10000) {
                    proporcao = 200;
                } else if (pontuacao == 15000) {
                    proporcao = 180;
                } else if (pontuacao == 20000) {
                    proporcao = 150;
                } else if (pontuacao == 25000) {
                    proporcao = 100;
                }

                //Reinicia as configuraÃ§Ãµes do jogo ao perder todas as vidas
                if (j.vida == 0 && j.morto == 3) {
                    iniciarJogo = false;
                    fimJogo = true;
                    b.desenhar(g);

                    if (pontuacao > melhorPontuacao) {
                        melhorPontuacao = pontuacao;
                    }

                    o.desenhar(g);
                    g.setColor(Color.WHITE);
                    g.setFont(new Font("Arial", 0, 24));
                    g.drawString("FIM DE JOGO", 415, 180);
                    g.setFont(new Font("Arial", 0, 20));
                    g.drawString("Melhor pontuaÃ§Ã£o:", 415, 380);
                    g.drawString("" + melhorPontuacao, 475, 410);
                    g.drawString("Sua pontuaÃ§Ã£o:", 425, 450);
                    g.drawString("" + pontuacao, 475, 480);
                    g.drawString("Pressione ESPAÃ‡O para reiniciar", 355, 540);

                    meteoros.clear();
                    lixos.clear();
                    pontuacao = 0;
                    tempo = 0;
                    proporcao = 700;
                    j.vida = 3;
                    j.morto = 0;
                    j.setX(450);
                    j.setY(350);
                    e.setY(700);
                }
            }

            g.dispose();
            getBufferStrategy().show();
            try {
                Thread.sleep(2);
            } catch (InterruptedException ex) {
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
